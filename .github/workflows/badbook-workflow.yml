name: Convert Optimus2502.bin to PGN

on:
  workflow_dispatch:          # manual trigger
  push:                       # or auto when the .bin changes
    paths: [Optimus2502.bin]

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install python-chess
      run: pip install --quiet 'chess>=1.10.0'

    - name: Dump book to PGN (cycle-safe)
      run: |
        python - <<'PY'
        import chess, chess.polyglot, chess.pgn, pathlib, sys, collections

        BIN = pathlib.Path("Optimus2502.bin")
        OUT = pathlib.Path("Optimus2502.pgn")

        if not BIN.exists():
            sys.exit("Book file Optimus2502.bin not found in repository root.")

        reader = chess.polyglot.open_reader(str(BIN))
        root   = chess.Board()

        with OUT.open("w", encoding="utf-8") as pgn:
            # stack: (board, line, seen_hashes_iterator)
            StackItem = collections.namedtuple("StackItem", "board line seen")
            stack = [StackItem(root, [], {root.zobrist_hash()})]

            while stack:
                board, line, seen = stack.pop()

                moves = list(reader.find_all(board))
                if not moves:
                    game = chess.pgn.Game()
                    node = game
                    for mv in line:
                        node = node.add_variation(mv)
                    print(game, file=pgn, end="\n\n")
                    continue

                for entry in reversed(moves):
                    mv = entry.move
                    board.push(mv)
                    zh = board.zobrist_hash()
                    if zh not in seen:                 # cycle check
                        stack.append(
                            StackItem(
                                board.copy(stack=False),
                                line + [mv],
                                seen | {zh}
                            )
                        )
                    board.pop()

        reader.close()
        print(f"âœ… PGN written to {OUT} (streamed; cycle-safe).")
        PY

    - name: Upload PGN
      uses: actions/upload-artifact@v4
      with:
        name: Optimus2502.pgn
        path: Optimus2502.pgn
